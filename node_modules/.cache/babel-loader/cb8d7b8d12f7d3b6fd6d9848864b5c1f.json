{"ast":null,"code":"var _jsxFileName = \"/Users/noahhamann/dice-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Dice from \"./Dice\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [diceNumber, setDiceNumber] = React.useState(allNewDice());\n  const [tenzies, setTenzies] = React.useState(false);\n  React.useEffect(() => {\n    const allDiceHeld = diceNumber.every(die => die.isHeld);\n    const firstValue = diceNumber[0].value;\n    const allSameValues = diceNumber.every(die => die.value === firstValue);\n\n    if (allDiceHeld && allSameValues) {\n      setTenzies(true);\n      console.log(\"You won!\");\n    }\n  }, [dice]);\n\n  function allNewDice() {\n    let diceArray = [];\n\n    for (let i = 0; i < 10; i++) {\n      const randomNum = Math.ceil(Math.random() * 6);\n      diceArray.push({\n        value: randomNum,\n        isHeld: false,\n        id: nanoid()\n      });\n    }\n\n    return diceArray;\n  }\n\n  function rollDice() {\n    setDiceNumber(prevDice => prevDice.map(die => {\n      return die.isHeld ? die : {\n        value: Math.ceil(Math.random() * 6),\n        isHeld: false,\n        id: nanoid()\n      };\n    }));\n  }\n\n  function holdDice(id) {\n    setDiceNumber(prevDice => prevDice.map(die => {\n      return die.id === id ? { ...die,\n        isHeld: !die.isHeld\n      } : die;\n    }));\n  }\n\n  const diceElements = diceNumber.map(die => {\n    return /*#__PURE__*/_jsxDEV(Dice, {\n      value: die.value,\n      isHeld: die.isHeld,\n      holdDice: () => holdDice(die.id)\n    }, die.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"pageContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tenzies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"instructions\",\n      children: \"Roll until all dice are the same. Click each die to freeze it at its current value between rolls.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"diceContainer\",\n      children: diceElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-dice\",\n      onClick: rollDice,\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"Ap1Lw3YsV/Guv/qZxygYeRtijUs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/noahhamann/dice-game/src/App.js"],"names":["React","Dice","nanoid","App","diceNumber","setDiceNumber","useState","allNewDice","tenzies","setTenzies","useEffect","allDiceHeld","every","die","isHeld","firstValue","value","allSameValues","console","log","dice","diceArray","i","randomNum","Math","ceil","random","push","id","rollDice","prevDice","map","holdDice","diceElements"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Dice from \"./Dice\"\nimport {nanoid} from \"nanoid\"\n\n\nfunction App() {\n\n  const [diceNumber, setDiceNumber] = React.useState(allNewDice());\n  const [tenzies, setTenzies] = React.useState(false);\n\n  React.useEffect(() => {\n    const allDiceHeld = diceNumber.every((die) => die.isHeld);\n    const firstValue = diceNumber[0].value;\n    const allSameValues = diceNumber.every((die) => die.value === firstValue);\n    if(allDiceHeld && allSameValues) {\n      setTenzies(true);\n      console.log(\"You won!\")\n    }\n\n\n  }, [dice])\n\n  function allNewDice() {\n    let diceArray = [];\n    for(let i = 0; i < 10; i++) {\n      const randomNum = Math.ceil(Math.random() * 6);\n      diceArray.push({ \n        value: randomNum, \n        isHeld: false,\n        id: nanoid()\n      });\n    }\n    return diceArray;\n  }\n\n  function rollDice() {\n    setDiceNumber((prevDice) => prevDice.map((die) => {\n      return die.isHeld ? die : { \n        value: Math.ceil(Math.random() * 6), \n        isHeld: false, \n        id: nanoid()\n      }\n    }))\n  }\n\n  function holdDice(id) {\n    setDiceNumber((prevDice) => prevDice.map((die) => {\n      return die.id === id ? {...die, isHeld: !die.isHeld} : die\n    }))\n\n  }\n\n  const diceElements = diceNumber.map((die) => {\n    return <Dice key={die.id} value={die.value} isHeld={die.isHeld} holdDice={() => holdDice(die.id)}/>\n  })\n\n\n  return (\n  <main className=\"pageContainer\">\n    <h1 className=\"title\">Tenzies</h1>\n    <p className=\"instructions\">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>\n    <div className=\"diceContainer\">\n      {diceElements}\n    </div>\n    <button className=\"roll-dice\" onClick={rollDice}>Roll</button>\n\n  </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}